# handlers/game_handlers.py
"""
Handlers for game commands and callbacks.
"""
import random
import asyncio
from datetime import timedelta
import telegram
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CommandHandler, CallbackQueryHandler
from telegram.helpers import escape_markdown
from typing import Optional, List, Tuple

from config import logger, GAME_TIMEOUT_SECONDS, THEMES, DEFAULT_THEME_KEY
from game_state import games, banned_users, chat_stats
from game_logic import get_symbol_emoji, get_keyboard, check_winner
from handlers.ai_handlers import ai_move

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ CrackNolikBot!</b> üéâ\n\n"
        "üîπ /newgame ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "üîπ /themes ‚Äî –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É\n",
        parse_mode="HTML"
    )

async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newgame - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    username = update.effective_user.username or f"player_{user_id}"
    message = update.effective_message or update.message
    
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if str(user_id) in banned_users or update.effective_user.username in banned_users:
        await message.reply_text("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –∏–≥—Ä—ã.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É
    if chat_id in games and not games[chat_id].get('game_over', True):
        await message.reply_text(
            "‚è≥ –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.",
            reply_to_message_id=games[chat_id].get('message_id')
        )
        logger.warning(f"–ü—ã—Ç–∞–ª–∏—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ —á–∞—Ç–µ {chat_id}, –≥–¥–µ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞.")
        return

    # –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏–≥—Ä—ã
    if chat_id in games:
        old_job = games[chat_id].get('timeout_job')
        if old_job:
            try:
                old_job.schedule_removal()
                logger.info(f"Removed previous timeout job for chat {chat_id}.")
            except Exception as e:
                logger.warning(f"Could not remove timeout job for chat {chat_id}: {e}")
        del games[chat_id]

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    first_player = random.choice(["X", "O"])
    second_player = "O" if first_player == "X" else "X"
    chosen_key = context.user_data.get('chosen_theme', DEFAULT_THEME_KEY)
    theme_emojis = THEMES.get(chosen_key, THEMES[DEFAULT_THEME_KEY])
    game_data = {
        "board": list(range(1, 10)),
        "current_player": first_player,
        "game_over": False,
        "players": {first_player: user_id, second_player: None},
        "user_symbols": {user_id: first_player},
        "usernames": {user_id: username},
        "message_id": None,
        "timeout_job": None,
        "theme_emojis": theme_emojis
    }
    games[chat_id] = game_data

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    first_emoji = get_symbol_emoji(first_player, game_data['theme_emojis'])
    sent_message = await message.reply_text(
        "<b>üïπÔ∏è –ù–û–í–ê–Ø –ò–ì–†–ê –ù–ê–ß–ê–õ–ê–°–¨! üïπÔ∏è</b>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üë§ –ò–≥—Ä–æ–∫: <i>{escape_markdown(username, version=1)}</i>\n"
        f"üé≠ –°–∏–º–≤–æ–ª: {first_emoji}\n"
        f"‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –Ω–∞ —Ö–æ–¥: {GAME_TIMEOUT_SECONDS} —Å–µ–∫\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        "<i>–ñ–¥—ë–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...</i>",
        reply_markup=get_keyboard(chat_id),
        parse_mode="HTML"
    )
    game_data['message_id'] = sent_message.message_id

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ç–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    job_context = {'chat_id': chat_id, 'message_id': sent_message.message_id}
    timeout_job = context.job_queue.run_once(
        game_timeout,
        when=timedelta(seconds=GAME_TIMEOUT_SECONDS),
        data=job_context,
        name=f"game_timeout_{chat_id}"
    )
    game_data['timeout_job'] = timeout_job

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π."""
    query = update.callback_query
    user = update.effective_user
    chat_id = update.effective_chat.id
    data = query.data

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if str(user.id) in banned_users or user.username in banned_users:
        await query.answer("‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å.", show_alert=True)
        return

    # –û—Ç–≤–µ—Ç –Ω–∞ callback
    try:
        await query.answer()
    except telegram.error.BadRequest:
        pass

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–≥—Ä—ã
    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    game_data = games[chat_id]
    message_id = query.message.message_id if query.message else None
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    if message_id and message_id != game_data.get('message_id'):
        await query.answer("–°—Ç–∞—Ä–∞—è –∏–≥—Ä–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é.", show_alert=True)
        try:
            await context.bot.edit_message_reply_markup(chat_id, message_id, reply_markup=None)
        except Exception:
            pass
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ noop –∏ new_game –∏ —Ö–æ–¥–æ–≤
    if data == 'noop':
        return
    if data == 'new_game':
        # –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–æ–≤–∞—è –∏–≥—Ä–∞" –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await new_game(update, context)
        return
    if data.isdigit():
        cell = int(data)
        # –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ —Ö–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        board = game_data['board']
        if isinstance(board[cell], int):
            symbol = game_data['current_player']
            user_id = update.effective_user.id
            # –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            if game_data['players'][symbol] is None:
                other_symbol = 'O' if symbol == 'X' else 'X'
                # –ó–∞–ø—Ä–µ—â–∞–µ–º –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–≥—Ä–∞—Ç—å –∑–∞ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
                if game_data['players'][other_symbol] == user_id:
                    await query.answer("–í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ –∑–∞ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É", show_alert=True)
                    return
                # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –æ—Ç–º–µ–Ω–∞ —Ç–∞–π–º–∞—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                game_data['players'][symbol] = user_id
                game_data['user_symbols'][user_id] = symbol
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                username = update.effective_user.username or f"player_{user_id}"
                game_data['usernames'][user_id] = username
                if game_data.get('timeout_job'):
                    try:
                        game_data['timeout_job'].schedule_removal()
                        logger.info(f"Second player joined for chat {chat_id}, canceled timeout")
                    except Exception as e:
                        logger.warning(f"Could not cancel timeout job for chat {chat_id}: {e}")
                    game_data['timeout_job'] = None
            elif game_data['players'][symbol] != user_id:
                await query.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥", show_alert=True)
                return
            # –ê–Ω–∏–º–∞—Ü–∏—è —Ö–æ–¥–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–º–æ–¥–∑–∏
            keyboard = get_keyboard(chat_id)
            row, col = divmod(cell, 3)
            frames = ["‚è≥", "‚åõÔ∏è", "‚è≥"]
            for frame in frames:
                animated_keyboard = []
                for r_i, row_buttons in enumerate(keyboard.inline_keyboard):
                    new_row = []
                    for c_i, btn in enumerate(row_buttons):
                        if r_i == row and c_i == col:
                            new_row.append(InlineKeyboardButton(frame, callback_data="noop"))
                        else:
                            new_row.append(btn)
                    animated_keyboard.append(new_row)
                await query.edit_message_reply_markup(reply_markup=InlineKeyboardMarkup(animated_keyboard))
                await asyncio.sleep(0.2)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª –≤ —è—á–µ–π–∫—É –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            board[cell] = symbol
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
            game_data['last_move'] = cell
            winner, combo = check_winner(board)
            if winner:
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                game_data['game_over'] = True
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
                stats = chat_stats.setdefault(chat_id, {"games": 0, "wins": 0, "draws": 0, "top_players": {}})
                stats["games"] += 1
                if winner == "–ù–∏—á—å—è":
                    stats["draws"] += 1
                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∏—á—å–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–ª–µ–º
                    theme_emojis = game_data['theme_emojis']
                    text = "ü§ù –ù–∏—á—å—è!"
                    keyboard = get_keyboard(chat_id)
                    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")
                else:
                    stats["wins"] += 1
                    # –í–∞—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
                    winner_id = game_data['players'][winner]
                    winner_name = game_data['usernames'].get(winner_id, str(winner_id))
                    stats["top_players"][winner_name] = stats["top_players"].get(winner_name, 0) + 1
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∏–º–µ–Ω–µ–º –∏ —ç–º–æ–¥–∑–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    theme_emojis = game_data['theme_emojis']
                    winner_emoji = get_symbol_emoji(f"{winner}_win", theme_emojis)
                    text = f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {escape_markdown(winner_name, version=1)} {winner_emoji}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!"
                    keyboard = get_keyboard(chat_id, combo)
                    await query.edit_message_text(text, reply_markup=keyboard, parse_mode="Markdown")
            else:
                game_data['current_player'] = 'O' if symbol == 'X' else 'X'
                # –ï—Å–ª–∏ –∏–≥—Ä–∞ –ø—Ä–æ—Ç–∏–≤ –ò–ò, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ö–æ–¥ –ò–ò, –∏–Ω–∞—á–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                if game_data.get('vs_ai'):
                    await ai_move(query, context, chat_id)
                else:
                    await _restore_game_message(query, context, chat_id, theme_changed=False)
        return

async def game_timeout(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º–∞—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    job = context.job.data
    chat_id = job['chat_id']
    if chat_id in games:
        game_data = games[chat_id]
        if not game_data.get('game_over') and not game_data['players'].get('O' if game_data['current_player']=='X' else 'X'):
            await context.bot.edit_message_text(
                chat_id=chat_id,
                message_id=job['message_id'],
                text="‚åõ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]])
            )
            game_data['game_over'] = True
            game_data['timeout_job'] = None

async def _restore_game_message(query: telegram.CallbackQuery, context: ContextTypes.DEFAULT_TYPE, chat_id: int, theme_changed: bool) -> None:
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–≥—Ä–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã –∏–ª–∏ —Ö–æ–¥–µ."""
    game_data = games[chat_id]
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    x_id = game_data['players'].get('X')
    o_id = game_data['players'].get('O')
    x_name = game_data['usernames'].get(x_id, '‚Äî') if x_id else '‚Äî'
    o_name = game_data['usernames'].get(o_id, '‚Äî') if o_id else '‚Äî'
    emojis = game_data['theme_emojis']
    x_emoji = get_symbol_emoji('X', emojis)
    o_emoji = get_symbol_emoji('O', emojis)
    current = game_data['current_player']
    current_emoji = get_symbol_emoji(current, emojis)
    title = "üé® –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞! üé®\n\n" if theme_changed else ""
    text = (
        f"{title}<b>üîÑ –ò–ì–†–ê –í –ü–†–û–¶–ï–°–°–ï</b> üîÑ\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"üë§ {x_emoji}: <i>{escape_markdown(x_name, version=1)}</i>\n"
        f"üë§ {o_emoji}: <i>{escape_markdown(o_name, version=1)}</i>\n"
        "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        f"‚û°Ô∏è <b>–•–æ–¥–∏—Ç: {current_emoji}</b>"
    )
    await query.edit_message_text(
        text,
        reply_markup=get_keyboard(chat_id),
        parse_mode="HTML"
    )

# Handler objects
start_handler = CommandHandler("start", start)
new_game_handler = CommandHandler("newgame", new_game)
button_click_handler = CallbackQueryHandler(button_click, pattern=r"^(noop|[0-8]|new_game)$") 