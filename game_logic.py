import logging
from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, List, Optional, Tuple, Union

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from config import THEMES, DEFAULT_THEME_KEY, EMPTY_CELL_SYMBOL, logger
from game_state import games

def get_symbol_emoji(symbol: Union[str, int], game_theme_emojis: Dict[str, str]) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Ç–µ–º–µ.

    Args:
        symbol: 'X', 'O' –∏–ª–∏ –Ω–æ–º–µ—Ä –∫–ª–µ—Ç–∫–∏ (int).
        game_theme_emojis: –°–ª–æ–≤–∞—Ä—å —Å —ç–º–æ–¥–∑–∏ —Ç–µ–º—ã.
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å —ç–º–æ–¥–∑–∏ –∏–ª–∏ fallback-—Å–∏–º–≤–æ–ª.
    """
    if symbol == "X":
        return game_theme_emojis.get("X", "‚ùå")
    elif symbol == "O":
        return game_theme_emojis.get("O", "‚≠ï")
    elif isinstance(symbol, int): # –ü—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
        return game_theme_emojis.get(EMPTY_CELL_SYMBOL, "‚¨ú")
    # –§–æ–ª–ª–±—ç–∫ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ –≤—ã–∏–≥—Ä—ã—à–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–º–µ
    elif symbol == "X_win":
         return game_theme_emojis.get("X_win", "‚≠ê‚ùå‚≠ê")
    elif symbol == "O_win":
         return game_theme_emojis.get("O_win", "‚≠ê‚≠ï‚≠ê")
    return str(symbol)

def get_keyboard(chat_id: int, winning_indices: Optional[List[int]] = None) -> Optional[InlineKeyboardMarkup]:
    """–°–æ–∑–¥–∞–µ—Ç InlineKeyboard —Å –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º.

    Args:
        chat_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ —Å –∏–≥—Ä–æ–π.
        winning_indices: —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –ª–∏–Ω–∏–∏ –∏–ª–∏ None.
    Returns:
        InlineKeyboardMarkup —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª–µ–º –∏–ª–∏ None, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
    """
    if chat_id not in games:
        logger.warning(f"get_keyboard called for non-existent game in chat {chat_id}")
        return None

    game_data = games[chat_id]
    board = game_data["board"]
    is_game_over = game_data["game_over"]
    theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])
    # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞
    last_move = game_data.get("last_move", None)
    keyboard = []
    logger.debug(f"[get_keyboard chat={chat_id}] Board: {board}, Theme: {theme_emojis.get('name', 'Unknown')}, Winning: {winning_indices}")

    for i in range(0, 9, 3):
        row = []
        for j in range(3):
            cell_index = i + j
            cell = board[cell_index]
            cell_text = ""
            callback_data = "noop"

            if isinstance(cell, int):
                cell_text = get_symbol_emoji(cell, theme_emojis)
                if not is_game_over:
                    callback_data = str(cell_index)
            else:
                if is_game_over and winning_indices and cell_index in winning_indices:
                    win_symbol_key = f"{cell}_win"
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_symbol_emoji –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ –≤—ã–∏–≥—Ä—ã—à–∞ —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º
                    cell_text = get_symbol_emoji(win_symbol_key, theme_emojis)
                else:
                    cell_text = get_symbol_emoji(cell, theme_emojis)

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ö–æ–¥–∞
            if last_move == cell_index:
                cell_text = f"üü©{cell_text}üü©"

            logger.debug(f"[get_keyboard chat={chat_id}] Cell[{cell_index}]: {repr(cell)} -> Emoji: {repr(cell_text)}, Callback: {callback_data}")
            row.append(InlineKeyboardButton(cell_text, callback_data=callback_data))
        keyboard.append(row)

    control_row = []
    if is_game_over:
        control_row.append(InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game"))
    else:
        control_row.append(InlineKeyboardButton("üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="change_theme_prompt"))

    if control_row:
        keyboard.append(control_row)

    return InlineKeyboardMarkup(keyboard)

def check_winner(board: List[Union[int, str]]) -> Tuple[Optional[str], Optional[List[int]]]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–ª–∏ –Ω–∏—á—å—é –Ω–∞ –¥–æ—Å–∫–µ.

    Args:
        board: —Å–ø–∏—Å–æ–∫ –∏–∑ 9 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (int –∏–ª–∏ —Å–∏–º–≤–æ–ª).
    Returns:
        Tuple:
            - winner_symbol: 'X', 'O' –∏–ª–∏ '–ù–∏—á—å—è', –∏–ª–∏ None.
            - winning_indices: —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π –ª–∏–Ω–∏–∏ –∏–ª–∏ None.
    """
    win_combinations = [
        [0, 1, 2], [3, 4, 5], [6, 7, 8],  # –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        [0, 3, 6], [1, 4, 7], [2, 5, 8],  # –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
        [0, 4, 8], [2, 4, 6]              # –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    ]

    for combo in win_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] and not isinstance(board[combo[0]], int):
            return board[combo[0]], combo

    if not any(isinstance(cell, int) for cell in board):
        return "–ù–∏—á—å—è", None

    return None, None 