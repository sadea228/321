import random
import asyncio
from datetime import timedelta
import telegram
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from telegram.helpers import escape_markdown

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
from config import logger, THEMES, DEFAULT_THEME_KEY, GAME_TIMEOUT_SECONDS
from game_state import games
from game_logic import get_symbol_emoji, get_keyboard, check_winner

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ê–ª–∏ —á–µ–º–ø–∏–æ–Ω! üé≤ –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /newgame\n"
        "üé® –°–º–µ–Ω–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –∏–≥—Ä—ã: /themes"
    )

async def new_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /newgame - —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–∑ button_click)
    message = update.effective_message
    if not message:
        logger.error(f"Cannot start new game in chat {chat_id} without a message object.")
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —á–∞—Ç
        if update.effective_chat:
             try:
                 await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.")
             except Exception as send_err:
                 logger.error(f"Failed to send error message to chat {chat_id}: {send_err}")
        return

    username = update.effective_user.username or f"player_{user_id}"
    escaped_username = escape_markdown(username, version=1)

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É ---
    if chat_id in games and not games[chat_id].get('game_over', True):
         await message.reply_text(
             "‚è≥ –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã.",
             reply_to_message_id=games[chat_id].get('message_id')
         )
         logger.warning(f"User {username} ({user_id}) tried to start a new game in chat {chat_id} while another is active.")
         return

    # --- –û—Ç–º–µ–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∏–≥—Ä—ã --- (–¥–µ–ª–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –Ω–æ–≤–æ–π)
    if chat_id in games:
        old_job = games[chat_id].get('timeout_job')
        if old_job:
            old_job.schedule_removal()
            logger.info(f"Removed previous timeout job for chat {chat_id} before starting new game.")
        del games[chat_id]
        logger.info(f"Removed old game data for chat {chat_id} before starting new game.")

    initiator_theme_key = context.user_data.get('chosen_theme', DEFAULT_THEME_KEY)
    game_theme_emojis = THEMES.get(initiator_theme_key, THEMES[DEFAULT_THEME_KEY])

    first_player = random.choice(["X", "O"])
    second_player = "O" if first_player == "X" else "X"

    game_data = {
        "board": list(range(1, 10)),
        "current_player": first_player,
        "game_over": False,
        "players": {first_player: user_id, second_player: None},
        "user_symbols": {user_id: first_player},
        "usernames": {user_id: username},
        "message_id": None,
        "timeout_job": None,
        "theme_emojis": game_theme_emojis
    }
    games[chat_id] = game_data

    try:
        first_player_emoji = get_symbol_emoji(first_player, game_theme_emojis)
        sent_message = await message.reply_text(
            f"üé≤ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
            f"üé® –¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
            f"üë§ {escaped_username} –∏–≥—Ä–∞–µ—Ç –∑–∞ {first_player_emoji}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n\n"
            f"*–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç*: {first_player_emoji}\n\n"
            f"‚è±Ô∏è *–í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É*: {GAME_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥",
            reply_markup=get_keyboard(chat_id),
            parse_mode="Markdown"
        )
        game_data['message_id'] = sent_message.message_id
        logger.info(f"New game started by {username} ({user_id}) in chat {chat_id}. Message ID: {sent_message.message_id}")

        job_context = {'chat_id': chat_id, 'message_id': sent_message.message_id}
        timeout_job = context.job_queue.run_once(
            game_timeout,
            when=timedelta(seconds=GAME_TIMEOUT_SECONDS),
            data=job_context,
            name=f"game_timeout_{chat_id}"
        )
        game_data['timeout_job'] = timeout_job
        logger.info(f"Scheduled timeout job ({GAME_TIMEOUT_SECONDS}s) for game in chat {chat_id}")

    except telegram.error.BadRequest as e:
         logger.error(f"Failed to send new game message in chat {chat_id}: {e}")
         if chat_id in games: del games[chat_id]
    except Exception as e:
        logger.error(f"Unexpected error starting game in chat {chat_id}: {e}", exc_info=True)
        if chat_id in games: del games[chat_id]

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–π."""
    query = update.callback_query
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback query –∫–∞–∫ –º–æ–∂–Ω–æ —Ä–∞–Ω—å—à–µ
        await query.answer()
    except telegram.error.BadRequest as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ query —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π
        logger.warning(f"Failed to answer callback query (likely too old or already answered): {e}")

    data = query.data
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    message = query.message # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞
    message_id = message.message_id if message else None

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –ò–≥—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –≤–æ–æ–±—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç? ---
    if chat_id not in games:
        logger.warning(f"Button click received for potentially non-existent or starting game in chat {chat_id}. Data: {data}. Message ID: {message_id}")
        # –ù–ï —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è.
        # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –∏–≥—Ä—ã —Ç–æ—á–Ω–æ –Ω–µ—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.
        # –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∫–Ω–æ–ø–∫–µ —Ä–µ–∞–ª—å–Ω–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        # –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–æ–π –∏–≥—Ä—ã –∏–ª–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É.
        return # –í—ã—Ö–æ–¥–∏–º, –Ω–µ —Ç—Ä–æ–≥–∞—è —Ä–∞–∑–º–µ—Ç–∫—É

    # --- –ï—Å–ª–∏ –∏–≥—Ä–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (chat_id in games) ---
    game_data = games[chat_id]
    game_message_id = game_data.get('message_id')
    game_theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ö–ª–∏–∫ –±—ã–ª –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –∏–≥—Ä—ã? ---
    if message_id and game_message_id and message_id != game_message_id:
        logger.warning(f"Button click on OLD message ({message_id}, current game msg is {game_message_id}) in chat {chat_id}. Data: {data}. User: {user_id}")
        # –≠—Ç–æ —Ç–æ—á–Ω–æ –∫–ª–∏–∫ –ø–æ —Å—Ç–∞—Ä–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        try:
            await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
            logger.info(f"Removed keyboard from old game message {message_id} in chat {chat_id}.")
        except Exception as e:
            logger.warning(f"Could not remove keyboard from old message {message_id} in chat {chat_id}: {e}")
        return # –í—ã—Ö–æ–¥–∏–º

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö callback_data --- 

    # 1. –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ (–∑–∞–Ω—è—Ç–∞—è –∫–ª–µ—Ç–∫–∞ / –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã)
    if data == "noop":
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ query.answer, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        # await query.answer("–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=False)
        return

    # 2. –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
    elif data == "new_game":
        if not game_data.get('game_over', True):
             # await query.answer("–≠—Ç–∞ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=True) # –ù–µ —Å–ø–∞–º–∏–º, –µ—Å–ª–∏ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
             logger.warning(f"User {user_id} clicked 'new_game' on an active game in chat {chat_id}.")
             return
        # –í—ã–∑—ã–≤–∞–µ–º new_game, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–µ–∫—É—â–∏–π update (–∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å)
        logger.info(f"User {user_id} initiating new game via button in chat {chat_id}.")
        # –°–æ–∑–¥–∞–µ–º "—Ñ–∏–∫—Ç–∏–≤–Ω—ã–π" update, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å message –∏ user
        # –í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π query.message, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞
        fake_update = Update(
            update_id=update.update_id,
            message=query.message # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç CallbackQuery
        )
        await new_game(fake_update, context)
        return

    # 3. –•–æ–¥ –∏–≥—Ä–æ–∫–∞ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–µ—Ç–∫—É 0-8)
    elif data.isdigit():
        cell_index = int(data)
        username = update.effective_user.username or f"player_{user_id}"

        if game_data["game_over"]:
            # await query.answer("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", show_alert=False)
            return

        current_player_symbol = game_data["current_player"]
        current_player_id = game_data["players"].get(current_player_symbol)
        second_player_symbol = "O" if current_player_symbol == "X" else "X"
        second_player_id = game_data["players"].get(second_player_symbol)

        # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        if not second_player_id:
            if user_id != current_player_id:
                game_data["players"][second_player_symbol] = user_id
                game_data["user_symbols"][user_id] = second_player_symbol
                game_data["usernames"][user_id] = username
                second_player_id = user_id
                logger.info(f"Player 2 ({username}, {user_id}) joined game in chat {chat_id} as {second_player_symbol}.")

                # –û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞
                timeout_job = game_data.get('timeout_job')
                if timeout_job:
                    timeout_job.schedule_removal()
                    game_data['timeout_job'] = None
                    logger.info(f"Removed timeout job for chat {chat_id} as second player joined.")

                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä—ã
                p1_id = game_data["players"][current_player_symbol]
                p1_username = game_data["usernames"].get(p1_id, f"player_{p1_id}")
                p1_emoji = get_symbol_emoji(current_player_symbol, game_theme_emojis)
                p2_emoji = get_symbol_emoji(second_player_symbol, game_theme_emojis)
                current_player_emoji = get_symbol_emoji(game_data["current_player"], game_theme_emojis)
                message_text = (
                    f"üé≤ *–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
                    f"üé® –¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
                    f"üë§ {escape_markdown(p1_username, version=1)} ({p1_emoji}) vs {escape_markdown(username, version=1)} ({p2_emoji})\n\n"
                    f"*–•–æ–¥–∏—Ç*: {current_player_emoji}"
                )
                try:
                    await query.edit_message_text(
                        message_text,
                        reply_markup=get_keyboard(chat_id),
                        parse_mode="Markdown"
                    )
                except Exception as e:
                    logger.error(f"Error updating message after P2 join in chat {chat_id}: {e}", exc_info=True)
                return # –•–æ–¥ –±—É–¥–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –Ω–∞–∂–∞—Ç–∏–µ–º
            else:
                # await query.answer("–û–∂–∏–¥–∞–π—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞!", show_alert=False)
                return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
        if user_id != current_player_id:
            # await query.answer("–ù–µ –≤–∞—à —Ö–æ–¥!", show_alert=False)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω—è—Ç–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞
        board = game_data["board"]
        if not isinstance(board[cell_index], int):
            # await query.answer("–ö–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞!", show_alert=True)
            return

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
        board[cell_index] = current_player_symbol
        logger.info(f"Player {username} ({user_id}) marked cell {cell_index} with {current_player_symbol} in chat {chat_id}.")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è/–Ω–∏—á—å–µ–π
        winner, winning_indices = check_winner(board)
        if winner:
            game_data["game_over"] = True
            keyboard_to_show = None
            if winner == "–ù–∏—á—å—è":
                message_text = f"üèÅ *–ù–∏—á—å—è!* üèÅ\n\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*"
                logger.info(f"Game in chat {chat_id} ended in a draw.")
                keyboard_to_show = get_keyboard(chat_id)
            else: # –ï—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
                 winner_id = game_data["players"][winner]
                 winner_username = game_data["usernames"].get(winner_id, f"player_{winner_id}")
                 winner_emoji = get_symbol_emoji(winner, game_theme_emojis)
                 message_text = f"üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å - {escape_markdown(winner_username, version=1)} ({winner_emoji})!* üèÜ\n\n–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*"
                 logger.info(f"Game in chat {chat_id} won by {winner_username} ({winner_id}).")
                 keyboard_to_show = get_keyboard(chat_id, winning_indices=winning_indices)

            try:
                await query.edit_message_text(
                    message_text,
                    reply_markup=keyboard_to_show,
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.error(f"Error updating message on game end in chat {chat_id}: {e}", exc_info=True)
        else:
            # –ü–µ—Ä–µ–¥–∞—á–∞ —Ö–æ–¥–∞
            game_data["current_player"] = second_player_symbol
            next_player_id = game_data["players"][second_player_symbol]
            next_player_username = game_data["usernames"].get(next_player_id, f"player_{next_player_id}")
            p1_id = game_data["players"]["X"]
            p2_id = game_data["players"]["O"]
            p1_username = game_data["usernames"].get(p1_id, f"player_{p1_id}")
            p2_username = game_data["usernames"].get(p2_id, f"player_{p2_id}")
            p1_emoji = get_symbol_emoji("X", game_theme_emojis)
            p2_emoji = get_symbol_emoji("O", game_theme_emojis)
            next_player_emoji = get_symbol_emoji(game_data["current_player"], game_theme_emojis)

            message_text = (
                 f"üé≤ *–ò–≥—Ä–∞ –∏–¥–µ—Ç!* üé≤\n\n"
                 f"üé® –¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*\n\n"
                 f"üë§ {escape_markdown(p1_username, version=1)} ({p1_emoji}) vs {escape_markdown(p2_username, version=1)} ({p2_emoji})\n\n"
                 f"*–•–æ–¥–∏—Ç*: {escape_markdown(next_player_username, version=1)} ({next_player_emoji})"
            )
            try:
                await query.edit_message_text(
                    message_text,
                    reply_markup=get_keyboard(chat_id),
                    parse_mode="Markdown"
                )
            except telegram.error.BadRequest as e:
                 if "Message is not modified" not in str(e):
                      logger.error(f"Error updating message on turn change in chat {chat_id}: {e}")
            except Exception as e:
                 logger.error(f"Unexpected error updating message on turn change in chat {chat_id}: {e}", exc_info=True)
        return

async def game_timeout(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–∞–π–º-–∞—É—Ç–∞ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞."""
    job_context = context.job.data
    chat_id = job_context['chat_id']
    message_id = job_context.get('message_id')

    if chat_id in games:
        game_data = games[chat_id]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –≤—Å—ë –µ—â–µ –∂–¥–µ—Ç –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        current_player = game_data.get('current_player')
        second_player_symbol = "O" if current_player == "X" else "X"
        if not game_data.get('game_over') and not game_data['players'].get(second_player_symbol):
            game_data['game_over'] = True
            game_theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])
            logger.info(f"Game in chat {chat_id} timed out waiting for P2.")

            if message_id:
                try:
                    await context.bot.edit_message_text(
                        chat_id=chat_id,
                        message_id=message_id,
                        text=f"‚åõ *–í—Ä–µ–º—è –≤—ã—à–ª–æ!* ‚åõ\n\n–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ({GAME_TIMEOUT_SECONDS} —Å–µ–∫). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n–¢–µ–º—ã: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]]),
                        parse_mode="Markdown"
                    )
                    logger.info(f"Edited message {message_id} in chat {chat_id} to show timeout.")
                except Exception as e:
                    logger.error(f"Failed to edit message {message_id} on timeout: {e}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                    try:
                        await context.bot.send_message(
                             chat_id=chat_id,
                             text=f"‚åõ *–í—Ä–µ–º—è –≤—ã—à–ª–æ!* ‚åõ\n\n–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ({GAME_TIMEOUT_SECONDS} —Å–µ–∫). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                             reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]]),
                             parse_mode="Markdown"
                        )
                    except Exception as send_e:
                         logger.error(f"Failed to send timeout message in chat {chat_id}: {send_e}")
            else:
                logger.warning(f"Message ID not found for timed out game in chat {chat_id}, sending new message.")
                try:
                    await context.bot.send_message(
                        chat_id=chat_id,
                         text=f"‚åõ *–í—Ä–µ–º—è –≤—ã—à–ª–æ!* ‚åõ\n\n–í—Ç–æ—Ä–æ–π –∏–≥—Ä–æ–∫ –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è ({GAME_TIMEOUT_SECONDS} —Å–µ–∫). –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", callback_data="new_game")]]),
                         parse_mode="Markdown"
                    )
                except Exception as send_e:
                     logger.error(f"Failed to send timeout message in chat {chat_id}: {send_e}")

            # –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ game_data, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –±—ã–ª–∞
            if 'timeout_job' in game_data: 
                game_data['timeout_job'] = None

        elif game_data.get('timeout_job'):
             logger.info(f"Timeout job executed for chat {chat_id}, but game already started/finished. Removing job reference.")
             game_data['timeout_job'] = None
    else:
        logger.warning(f"Timeout job executed for chat {chat_id}, but no game data found.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–º --- 

async def themes_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /themes - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã."""
    user_id = update.effective_user.id
    chosen_theme_key = context.user_data.get('chosen_theme', DEFAULT_THEME_KEY)
    current_theme = THEMES.get(chosen_theme_key, THEMES[DEFAULT_THEME_KEY])

    buttons = []
    for key, theme in THEMES.items():
        button_text = f"{theme['name']} {theme['X']}/{theme['O']}"
        if key == chosen_theme_key:
             button_text = f"‚úÖ {button_text}"
        buttons.append([InlineKeyboardButton(button_text, callback_data=f"theme_select_{key}")])

    await update.message.reply_text(
        f"üé® *–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–≥—Ä—ã* üé®\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: *{current_theme['name']} {current_theme['X']}/{current_theme['O']}*\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:",
        reply_markup=InlineKeyboardMarkup(buttons),
        parse_mode="Markdown"
    )

async def select_theme_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∏–∑ –º–µ–Ω—é /themes."""
    query = update.callback_query
    await query.answer()

    theme_key = query.data.split("theme_select_")[-1]
    user_id = update.effective_user.id

    if theme_key in THEMES:
        context.user_data['chosen_theme'] = theme_key
        chosen_theme = THEMES[theme_key]
        logger.info(f"User {user_id} selected theme: {theme_key}")

        buttons = []
        for key, theme in THEMES.items():
            button_text = f"{theme['name']} {theme['X']}/{theme['O']}"
            if key == theme_key:
                 button_text = f"‚úÖ {button_text}"
            buttons.append([InlineKeyboardButton(button_text, callback_data=f"theme_select_{key}")])

        try:
            await query.edit_message_text(
                f"üé® *–í—ã–±–æ—Ä —Ç–µ–º—ã –∏–≥—Ä—ã* üé®\n\n"
                f"‚úÖ –¢–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞: *{chosen_theme['name']} {chosen_theme['X']}/{chosen_theme['O']}*\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É:",
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode="Markdown"
            )
        except telegram.error.BadRequest as e:
             logger.warning(f"Failed to edit themes message: {e}")
             if update.effective_chat:
                 try:
                     await update.effective_chat.send_message(
                         f"‚úÖ –¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: *{chosen_theme['name']} {chosen_theme['X']}/{chosen_theme['O']}*",
                         parse_mode="Markdown"
                     )
                 except Exception as send_err:
                      logger.error(f"Failed to send theme confirmation message: {send_err}")
    else:
        logger.warning(f"Invalid theme key received: {theme_key}")
        # await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–∞!", show_alert=True)

async def change_theme_prompt_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É' –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã."""
    query = update.callback_query
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    game_data = games[chat_id]

    if game_data.get('game_over', True):
        await query.answer("–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", show_alert=True)
        return

    player_symbols = [sym for sym, pid in game_data["players"].items() if pid == user_id]
    if not player_symbols:
        await query.answer("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å —Ç–µ–º—É.", show_alert=True)
        return
        
    await query.answer()

    buttons = []
    current_game_theme_key = None
    current_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])
    for key, theme in THEMES.items():
        if theme == current_emojis:
            current_game_theme_key = key
            break
            
    for key, theme in THEMES.items():
        button_text = f"{theme['name']} {theme['X']}/{theme['O']}"
        if key == current_game_theme_key:
            button_text = f"üéÆ {button_text}"
        buttons.append([InlineKeyboardButton(button_text, callback_data=f"theme_select_ingame_{key}")])
    
    buttons.append([InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ", callback_data="cancel_theme_change")])
    
    try:
        await query.edit_message_text(
            f"üé® *–°–º–µ–Ω–∞ —Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã* üé®\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É –¥–ª—è —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã. –≠—Ç–æ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–∏—Ç –≤–∞—à—É —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±—É–¥—É—â–∏—Ö –∏–≥—Ä.",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
        logger.info(f"User {user_id} initiated theme change prompt in game chat {chat_id}")
    except Exception as e:
        logger.error(f"Failed to show theme selection prompt in chat {chat_id}: {e}")
        # await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—ã–±–æ—Ä —Ç–µ–º—ã.", show_alert=True)

async def select_theme_ingame_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã."""
    query = update.callback_query
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    theme_key = query.data.split("theme_select_ingame_")[-1]

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
        
    game_data = games[chat_id]

    player_symbols = [sym for sym, pid in game_data["players"].items() if pid == user_id]
    if not player_symbols:
        await query.answer("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–º–µ–Ω—É —Ç–µ–º—ã.", show_alert=True)
        return
        
    if theme_key not in THEMES:
        await query.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç–µ–º–∞.", show_alert=True)
        logger.warning(f"Invalid ingame theme key received: {theme_key} from user {user_id}")
        return

    await query.answer(f"–¢–µ–º–∞ '{THEMES[theme_key]['name']}' –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!") 

    game_data['theme_emojis'] = THEMES[theme_key]
    context.user_data['chosen_theme'] = theme_key
    logger.info(f"User {user_id} changed ingame theme to {theme_key} in chat {chat_id}. User preference updated.")

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã
    await _restore_game_message(query, context, chat_id, theme_changed=True)

async def cancel_theme_change_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ –∏–≥—Ä–µ' –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã."""
    query = update.callback_query
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    if chat_id not in games:
        await query.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
        
    game_data = games[chat_id]
    
    player_exists = any(pid == user_id for pid in game_data["players"].values())
    if not player_exists:
        await query.answer("–¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É —Ç–µ–º—ã.", show_alert=True)
        return

    await query.answer("–°–º–µ–Ω–∞ —Ç–µ–º—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    logger.info(f"User {user_id} cancelled ingame theme change in chat {chat_id}.")

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä—ã
    await _restore_game_message(query, context, chat_id, theme_changed=False)

async def _restore_game_message(query: telegram.CallbackQuery, context: ContextTypes.DEFAULT_TYPE, chat_id: int, theme_changed: bool):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    if chat_id not in games:
        return # –ò–≥—Ä–∞ –º–æ–≥–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –ø–æ–∫–∞ –≤—ã–±–∏—Ä–∞–ª–∏ —Ç–µ–º—É
        
    game_data = games[chat_id]
    game_theme_emojis = game_data.get("theme_emojis", THEMES[DEFAULT_THEME_KEY])
    current_player_symbol = game_data['current_player']
    current_player_id = game_data['players'].get(current_player_symbol)
    current_player_username = game_data['usernames'].get(current_player_id, f"player_{current_player_id}")
    
    p1_id = game_data["players"].get("X")
    p2_id = game_data["players"].get("O")
    p1_username = game_data["usernames"].get(p1_id, "?") if p1_id else "?"
    p2_username = game_data["usernames"].get(p2_id, "–û–∂–∏–¥–∞–Ω–∏–µ") if p2_id else "–û–∂–∏–¥–∞–Ω–∏–µ"
    
    p1_emoji = get_symbol_emoji("X", game_theme_emojis)
    p2_emoji = get_symbol_emoji("O", game_theme_emojis)
    current_player_emoji = get_symbol_emoji(current_player_symbol, game_theme_emojis)
    theme_status = " (–∏–∑–º–µ–Ω–µ–Ω–∞)" if theme_changed else ""
    
    if p2_id: 
        message_text = (
             f"üé≤ *–ò–≥—Ä–∞ –∏–¥–µ—Ç!* üé≤\n\n"
             f"üé® –¢–µ–º–∞: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*{theme_status}\n\n"
             f"üë§ {escape_markdown(p1_username, version=1)} ({p1_emoji}) vs {escape_markdown(p2_username, version=1)} ({p2_emoji})\n\n"
             f"*–•–æ–¥–∏—Ç*: {escape_markdown(current_player_username, version=1)} ({current_player_emoji})"
        )
    else: # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –µ—â–µ –Ω–µ—Ç
        message_text = (
            f"üé≤ *–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!* üé≤\n\n"
            f"üé® –¢–µ–º–∞: *{game_theme_emojis['name']} {game_theme_emojis['X']}/{game_theme_emojis['O']}*{theme_status}\n\n"
            f"üë§ {escape_markdown(p1_username, version=1)} –∏–≥—Ä–∞–µ—Ç –∑–∞ {p1_emoji}\n"
            f"‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n\n"
            f"*–ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç*: {current_player_emoji}\n\n"
            f"‚è±Ô∏è *–í—Ä–µ–º—è –Ω–∞ –∏–≥—Ä—É*: {GAME_TIMEOUT_SECONDS} —Å–µ–∫—É–Ω–¥"
        )
        
    try:
        await query.edit_message_text(
            message_text,
            reply_markup=get_keyboard(chat_id),
            parse_mode="Markdown"
        )
    except telegram.error.BadRequest as e:
         if "Message is not modified" not in str(e):
              logger.error(f"Failed to restore game message in chat {chat_id}: {e}")
    except Exception as e:
         logger.error(f"Unexpected error restoring game message in chat {chat_id}: {e}", exc_info=True) 