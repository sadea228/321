import asyncio
import uvicorn
from fastapi import FastAPI, Request, Response
from http import HTTPStatus

from telegram import Update, BotCommand
from telegram.ext import Application, JobQueue, ContextTypes

from config import TOKEN, WEBHOOK_ENDPOINT_URL, WEBHOOK_PATH, PORT, logger
import handlers.game_handlers as game_handlers
import handlers.theme_handlers as theme_handlers
import handlers.admin_handlers as admin_handlers
import handlers.admin_panel_handlers as admin_panel_handlers
import handlers.ai_handlers as ai_handlers
import handlers.vip_handlers as vip_handlers

fastapi_app = FastAPI()

async def handle_telegram_update(request: Request, application: Application):
    body = await request.json()
    update = Update.de_json(body, application.bot)
    await application.process_update(update)
    return Response(status_code=HTTPStatus.OK)

async def main() -> None:
    if not TOKEN:
        logger.critical("TOKEN –Ω–µ –∑–∞–¥–∞–Ω")
        return
    job_queue = JobQueue()
    app = Application.builder().token(TOKEN).job_queue(job_queue).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(game_handlers.start_handler)
    app.add_handler(game_handlers.new_game_handler)
    app.add_handler(game_handlers.button_click_handler)
    app.add_handler(theme_handlers.themes_handler)
    app.add_handler(theme_handlers.select_theme_handler)
    app.add_handler(theme_handlers.change_theme_prompt_handler)
    app.add_handler(theme_handlers.select_theme_ingame_handler)
    app.add_handler(theme_handlers.cancel_theme_change_handler)
    app.add_handler(admin_handlers.reset_game_handler)
    app.add_handler(admin_handlers.reset_handler)
    app.add_handler(admin_handlers.ban_user_handler)
    app.add_handler(admin_handlers.unban_user_handler)
    app.add_handler(admin_handlers.chat_stats_handler)
    app.add_handler(ai_handlers.play_ai_handler)
    app.add_handler(vip_handlers.vip_handler)
    app.add_handler(vip_handlers.setavatar_handler)
    app.add_handler(vip_handlers.signature_handler)
    app.add_handler(vip_handlers.setvip_handler)
    app.add_handler(vip_handlers.removevip_handler)
    app.add_handler(vip_handlers.setsymbol_handler)
    app.add_handler(vip_handlers.viphelp_handler)
    app.add_handler(admin_panel_handlers.admin_panel_handler)
    app.add_handler(admin_panel_handlers.admin_callback_handler)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    commands = [
        BotCommand("start", "üëã –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("newgame", "üé≤ –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É"),
        BotCommand("play_ai", "ü§ñ –ò–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –ò–ò"),
        BotCommand("themes", "üé® –í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É"),
        BotCommand("resetgame", "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É"),
        BotCommand("reset", "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏–≥—Ä—É"),
        BotCommand("ban", "üö´ –ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand("unban", "‚úÖ –†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand("chatstats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Ç—É"),
        BotCommand("vip", "üíé –ü–æ–ª—É—á–∏—Ç—å VIP-–ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand("setavatar", "üë§ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä VIP"),
        BotCommand("setsignature", "‚úçÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å VIP"),
        BotCommand("setsymbol", "üé≠ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–º–≤–æ–ª VIP"),
        BotCommand("viphelp", "üí° –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ VIP"),
        BotCommand("setvip", "üëë –í—ã–¥–∞—Ç—å VIP-–ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand("removevip", "üî¥ –ó–∞–±—Ä–∞—Ç—å VIP-–ø–æ–¥–ø–∏—Å–∫—É"),
        BotCommand("admin", "üëë –û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω‚Äë–ø–∞–Ω–µ–ª—å"),
    ]
    await app.initialize()
    await app.bot.set_my_commands(commands)

    # –í–µ–±—Ö—É–∫
    if WEBHOOK_ENDPOINT_URL:
        await app.bot.set_webhook(url=WEBHOOK_ENDPOINT_URL, allowed_updates=Update.ALL_TYPES)
        async def webhook(request: Request):
            return await handle_telegram_update(request, app)
        fastapi_app.add_api_route(WEBHOOK_PATH, webhook, methods=["POST"])

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        logger.exception("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", exc_info=context.error)
        if isinstance(update, Update) and update.effective_message:
            try:
                await update.effective_message.reply_text("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except Exception:
                pass
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    config = uvicorn.Config(app=fastapi_app, host="0.0.0.0", port=PORT)
    server = uvicorn.Server(config)
    await app.start()
    await server.serve()
    await app.stop()
    
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é") 